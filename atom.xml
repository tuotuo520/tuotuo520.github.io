<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grayson&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/987de6411269b292f6438e4dc751fef6</icon>
  <subtitle>孙辉的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-26T08:25:23.535Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Grayson</name>
    <email>sunhuitjw@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot全局处理日期格式化</title>
    <link href="http://yoursite.com/2020/05/26/Springboot%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://yoursite.com/2020/05/26/Springboot%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2020-05-26T08:22:30.000Z</published>
    <updated>2020-05-26T08:25:23.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot全局日期格式化处理"><a href="#Springboot全局日期格式化处理" class="headerlink" title="Springboot全局日期格式化处理"></a>Springboot全局日期格式化处理</h1><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SvcOrderDailyStatisticsPo orderDailyStatisticsPo &#x3D; new SvcOrderDailyStatisticsPo();</span><br><span class="line">SimpleDateFormat dateFormat &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">Date stationTime &#x3D; dateFormat.parse(dateFormat.format(svcWorkOrderPo.getPayEndTime()));</span><br><span class="line">orderDailyStatisticsPo.setStatisticalDate(stationTime);</span><br></pre></td></tr></table></figure><p>项目中几乎涉及到格式化日期一般都会直接 new 一个SimpleDateFormat 对象，而且项目中的时间和日期API用的也比较混乱，考虑到 java.util.Date 和 java.util.Calendar 不支持时区，且非线程安全，对于日期的计算相对繁琐，技术部一致要求用JDK1.8以后的java.time LocalDateTime。但不少人还是在用 java.util.Date 和 java.util.Calendar 处理日期。</p><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>时间格式化的使用频率相当高，可以将这块抽象出来，做全局格式化处理</p><hr><ul><li><strong>通过 @JsonForma 注解</strong> ：使用@JsonFormat注解格式化时间，应该算是一个基本操作了，大部分开发者都应用此种方式，简单方便。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class OrderInfo &#123;</span><br><span class="line"></span><br><span class="line">    @JsonFormat(locale &#x3D; &quot;zh&quot;, timezone &#x3D; &quot;GMT+8&quot;, pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    @JsonFormat(locale &#x3D; &quot;zh&quot;, timezone &#x3D; &quot;GMT+8&quot;, pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private Date updateTime;</span><br><span class="line"></span><br><span class="line">    public LocalDateTime getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(LocalDateTime createTime) &#123;</span><br><span class="line">        this.createTime &#x3D; createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(Date updateTime) &#123;</span><br><span class="line">        this.updateTime &#x3D; updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样使用<code>Date</code>类型的字段和<code>LocalDateTime</code>都可以格式化成功，但这样仍然需要在每个实体类对应的日期字段上加上 <code>@JsonFormat</code>  注解</li></ul><hr><ul><li><strong>通过全局配置</strong> ：Springboot 已经为我们提供了日期格式化 <code>${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}</code>，这里我们需要进行全局配置，配置比较简单，也无需在实体类属性上添加<code>@JsonFormat</code>注解。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class LocalDateTimeSerializerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br><span class="line">    private String pattern;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public LocalDateTimeSerializer localDateTimeDeserializer() &#123;</span><br><span class="line">        return new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() &#123;</span><br><span class="line">        return builder -&gt; builder.serializerByType(LocalDateTime.class, localDateTimeDeserializer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这种方式可支持 <code>Date</code> 类型和 <code>LocalDateTime</code>类型并存，那么有一个问题就是现在全局时间格式是 <code>yyyy-MM-dd HH:mm:ss</code>，但有的字段却需要<code>yyyy-MM-dd</code>格式咋整？那就需要配合<code>@JsonFormat</code>注解使用，在特定的字段属性添加<code>@JsonFormat</code>注解即可，因为<code>@JsonFormat</code>注解优先级比较高，会以<code>@JsonFormat</code>注解标注的时间格式为主。</li></ul><hr><ul><li><strong>通过全局配置2</strong> ：这种全局配置的实现方式与上边的效果是一样的，不过，要注意的是使用这种配置后，字段手动配置<code>@JsonFormat</code>注解将不再生效。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class LocalDateTimeSerializerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br><span class="line">    private String pattern;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Primary</span><br><span class="line">    public ObjectMapper serializingObjectMapper() &#123;</span><br><span class="line">        ObjectMapper objectMapper &#x3D; new ObjectMapper();</span><br><span class="line">        JavaTimeModule javaTimeModule &#x3D; new JavaTimeModule();</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer());</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer());</span><br><span class="line">        objectMapper.registerModule(javaTimeModule);</span><br><span class="line">        return objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class LocalDateTimeSerializer extends JsonSerializer&lt;LocalDateTime&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void serialize(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers) throws IOException &#123;</span><br><span class="line">            gen.writeString(value.format(ofPattern(pattern)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class LocalDateTimeDeserializer extends JsonDeserializer&lt;LocalDateTime&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public LocalDateTime deserialize(JsonParser p, DeserializationContext deserializationContext) throws IOException &#123;</span><br><span class="line">            return LocalDateTime.parse(p.getValueAsString(), ofPattern(pattern));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>LocalDateTime通过加上注解 @DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”)</strong> ：<br>属性中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">@TableField(&quot;create_time&quot;)</span><br><span class="line">private LocalDateTime createTime</span><br></pre></td></tr></table></figure>参数接受中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;add&quot;)</span><br><span class="line">    public void add(@RequestParam @DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;) LocalDateTime qq) &#123;</span><br><span class="line">        VehicleEntity vehicleEntity &#x3D; vehicleService.getById(1);</span><br><span class="line">        vehicleEntity.setCreateTime(qq);</span><br><span class="line">        System.out.println(qq);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Springboot全局日期格式化处理&quot;&gt;&lt;a href=&quot;#Springboot全局日期格式化处理&quot; class=&quot;headerlink&quot; title=&quot;Springboot全局日期格式化处理&quot;&gt;&lt;/a&gt;Springboot全局日期格式化处理&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="全局格式化处理" scheme="http://yoursite.com/categories/%E5%85%A8%E5%B1%80%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Springboot" scheme="http://yoursite.com/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>1111.有效括号的嵌套深度</title>
    <link href="http://yoursite.com/2020/04/01/1111-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/04/01/1111-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/</id>
    <published>2020-04-01T05:38:42.000Z</published>
    <updated>2020-04-01T05:45:01.408Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
      <category term="解题思路" scheme="http://yoursite.com/categories/leetcode/%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>有戏问题解决方案.md</title>
    <link href="http://yoursite.com/2020/03/25/%E6%9C%89%E6%88%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2020/03/25/%E6%9C%89%E6%88%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-03-25T08:40:01.000Z</published>
    <updated>2020-03-25T08:44:13.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录环境上-Canal-出现-CanalParseException-column-size-is-not-match-for-table-问题解决方案"><a href="#记录环境上-Canal-出现-CanalParseException-column-size-is-not-match-for-table-问题解决方案" class="headerlink" title="记录环境上 Canal 出现 CanalParseException: column size is not match for table 问题解决方案"></a>记录环境上 Canal 出现 CanalParseException: column size is not match for table 问题解决方案</h1><h2 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h2><h4 id="有戏的同学要在记录表增加一个字段，该表已经被-canal-监控起来。新增字段后程序发现接收不到-canal-发送的消息。"><a href="#有戏的同学要在记录表增加一个字段，该表已经被-canal-监控起来。新增字段后程序发现接收不到-canal-发送的消息。" class="headerlink" title="有戏的同学要在记录表增加一个字段，该表已经被 canal 监控起来。新增字段后程序发现接收不到 canal 发送的消息。"></a>有戏的同学要在记录表增加一个字段，该表已经被 canal 监控起来。新增字段后程序发现接收不到 canal 发送的消息。</h4><p>canal在处理表结构的DDL变更时采用了一种简单的策略，在内存里维护了一个当前数据库内表结构的镜像(通过desc table获取)。<br>这样的内存表结构镜像的维护存在问题，如果当前在处理的binlog为历史时间段T0，当前时间为T1，存在的一些异常分支情况：   </p><ul><li>假如在T0~T1的时间内，表结构A发生过增加列的DDL操作，那在处理T0时间段A表的binlog时，拿到的表结构为T1的镜像，就会出现列不匹配的情况. 比如之前的异常: column size is not match for table: xx , 12 vs 13</li><li>假如在T0~T1发生了增加 C1列、删除了C2列，此时拿到的列的总数还是和T0时保持一致，但是对应的列会错位</li><li>假如在T0~T1发生了drop table的DDL，此时拿表结构时会出现无法找到表的异常，一直阻塞整个binlog处理，比如not found [xx] in db</li></ul><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>打开 conf/canal.properties，选择持久化存储的方案，默认为H2，更改为 Mysql</li></ol><p>   canal.instance.tsdb.spring.xml=classpath:spring/tsdb/h2-tsdb.xml<br>   #canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml</p><ol start="2"><li>打开 instance 下的 instance.properties ，修改对应的参数</li></ol><table><thead><tr><th>参数名</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>canal.instance.tsdb.enable</td><td>true</td><td>是否开启时序表结构的能力</td></tr><tr><td>canal.instance.tsdb.dir</td><td>${canal.file.data.dir:../conf}/${canal.instance.destination:}</td><td>默认存储到conf/$instance</td></tr><tr><td>canal.instance.tsdb.url</td><td>jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;</td><td>jdbc链接串</td></tr><tr><td>canal.instance.tsdb.dbUsername</td><td>canal</td><td>jdbc用户名，因为有自动创建表的能力，所以对该用户需要有create table的权限</td></tr><tr><td>canal.instance.tsdb.dbPassword</td><td>canal</td><td>jdbc密码</td></tr></tbody></table><p> For Example :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\# table meta tsdb info  </span><br><span class="line"></span><br><span class="line">canal.instance.tsdb.enable&#x3D;true  </span><br><span class="line"></span><br><span class="line">canal.instance.tsdb.dir&#x3D;$&#123;canal.file.data.dir:..&#x2F;conf&#125;&#x2F;$&#123;canal.instance.destination:&#125;  </span><br><span class="line"> </span><br><span class="line">canal.instance.tsdb.url&#x3D;jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;&#x2F;h2;CACHE_SIZE&#x3D;1000;MODE&#x3D;MYSQL;  </span><br><span class="line"></span><br><span class="line">\#canal.instance.tsdb.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;canal_tsdb  </span><br><span class="line"></span><br><span class="line">canal.instance.tsdb.dbUsername&#x3D;canal  </span><br><span class="line"></span><br><span class="line">canal.instance.tsdb.dbPassword&#x3D;canal</span><br></pre></td></tr></table></figure><p>重启mysql，看到数据库中已经生成对应表镜像，解决问题。</p><p><img src="https://i.loli.net/2020/03/25/Zjki9MHTC3Gw2Wp.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记录环境上-Canal-出现-CanalParseException-column-size-is-not-match-for-table-问题解决方案&quot;&gt;&lt;a href=&quot;#记录环境上-Canal-出现-CanalParseException-column-si
      
    
    </summary>
    
    
      <category term="线上问题解决思路" scheme="http://yoursite.com/categories/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    
      <category term="Canal" scheme="http://yoursite.com/categories/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/Canal/"/>
    
    
      <category term="Canal" scheme="http://yoursite.com/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>Mysql8.0 Windows 安装教程</title>
    <link href="http://yoursite.com/2020/03/18/Mysql8-0-Windows-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/18/Mysql8-0-Windows-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-03-18T02:58:58.000Z</published>
    <updated>2020-03-18T03:01:10.348Z</updated>
    
    <content type="html"><![CDATA[<p>#Mysql 8.0 安装教程</p><p>##下载</p><h3 id="mysql官方下载地址"><a href="#mysql官方下载地址" class="headerlink" title="mysql官方下载地址"></a><a href="'https://dev.mysql.com/downloads/mysql/'">mysql官方下载地址</a></h3><h3 id="国内镜像地址-souhu"><a href="#国内镜像地址-souhu" class="headerlink" title="国内镜像地址(souhu)"></a><a href="'http://mirrors.sohu.com/mysql/MySQL-8.0/'">国内镜像地址(souhu)</a></h3><p>##安装</p><p>下载完成后解压到任意目录</p><p><img src="https://upload-images.jianshu.io/upload_images/19257537-d51e9c33e4b791b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql安装目录.png"></p><p>打开系统环境变量，新建 <code>MYSQL_HOME</code><br><img src="https://upload-images.jianshu.io/upload_images/19257537-4207eea24c8a0107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql_home.png"><br>添加<code>Path</code><br><img src="https://upload-images.jianshu.io/upload_images/19257537-cb9c9bf2303cb6cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql_home.png"></p><p>###配置<br>打开mysql安装目录，添加<code>mysql.ini</code>文件并且编辑,粘贴如下代码</p><pre><code>[client]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录basedir=D:\\setup\\dev\\mysql# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错# datadir=D:\\Program Files\\sqldata# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB</code></pre><p>###启动</p><p>在安装目录下执行cmd命令（<strong><font color="Red">以管理员方式运行</font></strong>）</p><p>####初始化数据库<br>执行如下命令</p><p><code>mysqld --initialize --console</code></p><p>控制台输出</p><pre><code>2020-03-18T00:59:19.792092Z 0 [System] [MY-013169] [Server] D:\setup\dev\mysql\bin\mysqld.exe (mysqld 8.0.19) initializing of server in progress as process 54522020-03-18T00:59:19.793714Z 0 [Warning] [MY-013242] [Server] --character-set-server: &apos;utf8&apos; is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.2020-03-18T00:59:23.210194Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: 1d.GL2_u&amp;h==</code></pre><p>初始密码就是末尾的 <code>1d.GL2_u&amp;h==</code> ，后续登录需要用到，你也可以在登陆后修改密码。</p><p>键入安装命令：</p><p><code>mysqld install</code></p><p>启动输入以下命令：</p><p><code>net start mysql</code></p><pre><code>PS D:\setup\dev\mysql&gt; mysqld installService successfully installed.PS D:\setup\dev\mysql&gt; net start mysqlMySQL 服务正在启动 .MySQL 服务已经启动成功。</code></pre><p>##登录</p><p>控制台执行<code>mysql  -uroot -p</code>,键入刚刚保存的随机密码登录mysql。<br>修改密码</p><pre><code>mysql&gt; use mysqlERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.mysql&gt; alter user user() identified by &apos;123456&apos;-&gt; ;Query OK, 0 rows affected (0.02 sec)mysql&gt; show databases;+--------------------+| Database   |+--------------------+| information_schema || mysql  || performance_schema || sys|+--------------------+4 rows in set (0.01 sec)mysql&gt; use mysql;Database changedmysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;123456&apos;-&gt; ;Query OK, 0 rows affected (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)</code></pre><p>####至此已安装完毕，可以用远程客户端如 Navicat 连接啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Mysql 8.0 安装教程&lt;/p&gt;
&lt;p&gt;##下载&lt;/p&gt;
&lt;h3 id=&quot;mysql官方下载地址&quot;&gt;&lt;a href=&quot;#mysql官方下载地址&quot; class=&quot;headerlink&quot; title=&quot;mysql官方下载地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;&#39;https://
      
    
    </summary>
    
    
      <category term="安装教程" scheme="http://yoursite.com/categories/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
      <category term="mysql" scheme="http://yoursite.com/categories/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>孙逸宸出生啦</title>
    <link href="http://yoursite.com/2020/03/05/%E5%AD%99%E9%80%B8%E5%AE%B8%E5%87%BA%E7%94%9F%E5%95%A6/"/>
    <id>http://yoursite.com/2020/03/05/%E5%AD%99%E9%80%B8%E5%AE%B8%E5%87%BA%E7%94%9F%E5%95%A6/</id>
    <published>2020-03-05T09:12:41.000Z</published>
    <updated>2020-03-18T03:32:23.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="孙逸宸诞生啦"><a href="#孙逸宸诞生啦" class="headerlink" title="孙逸宸诞生啦"></a>孙逸宸诞生啦</h1><p>2020.01.02，小家伙终于调皮的从妈妈的肚子了出来了，因为活泼好动害的他妈妈肚子上挨了一刀。<br>到现在为止已经63天啦，每天都想赶快下班回家，等不及想要见到他。</p><p><img src="/images/16-48-09.jpg" alt="老父親般微笑"></p><p>抬头属实抬得不错</p><p><img src="/images/16-49-16.jpg" alt="抬頭"></p><p><img src="/images/16-49-23.jpg" alt="抬頭"></p><p><img src="/images/16-49-30.jpg" alt="抬頭"><br>由于疫情原因明天才能和老婆带他到医院检查，但愿一切平安无事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;孙逸宸诞生啦&quot;&gt;&lt;a href=&quot;#孙逸宸诞生啦&quot; class=&quot;headerlink&quot; title=&quot;孙逸宸诞生啦&quot;&gt;&lt;/a&gt;孙逸宸诞生啦&lt;/h1&gt;&lt;p&gt;2020.01.02，小家伙终于调皮的从妈妈的肚子了出来了，因为活泼好动害的他妈妈肚子上挨了一刀。&lt;br&gt;到
      
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="寶寶" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/%E5%AF%B6%E5%AF%B6/"/>
    
    
      <category term="Baby" scheme="http://yoursite.com/tags/Baby/"/>
    
  </entry>
  
</feed>
